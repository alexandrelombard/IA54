/** 
 * 
 */
package fr.utbm.ia54.agents

import fr.utbm.ia54.BoidBody
import fr.utbm.ia54.Environment
import fr.utbm.ia54.EnvironmentUpdatedEvent
import fr.utbm.ia54.IntentionEvent
import fr.utbm.ia54.Perception
import fr.utbm.ia54.PerceptionEvent
import fr.utbm.ia54.SimulationStepEvent
import fr.utbm.ia54.Vector2d
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.lang.core.Address
import java.util.HashMap
import java.util.Map
import io.sarl.core.Lifecycle
import java.util.concurrent.ConcurrentHashMap
import java.util.UUID

/** 
 * @author Alexandre Lombard
 * 
 */
agent EnvironmentAgent {
	
	uses Lifecycle, DefaultContextInteractions
	
	val environment : Environment = new Environment()
	val intentions : Map<UUID, Vector2d> = new ConcurrentHashMap

	on Initialize {
		// When the environment is spawned, we spawn the boids
		for (i : 0 .. 10) {
			// We spawn the agent
			typeof(BoidAgent).spawn
		}
	}

	on Destroy {
		//
	}

	on AgentSpawned {
		if (occurrence.agentType == "fr.utbm.ia54.agents.BoidAgent") {
			// A new boid agent has been spawned, we create its body with a random position
			var body = new BoidBody(new Vector2d(400d * Math.random + 200d, 300d * Math.random + 150d))
			environment.bodies.put(occurrence.agentID, body)
		}
	}

	on AgentKilled {
		if (occurrence.agentType == "fr.utbm.ia54.agents.BoidAgent") {
			environment.bodies.remove(occurrence.agentID)
		}
	}
	
	on SimulationStepEvent {
		// Make a copy of the intentions, so they can't be changed while the bodies are moved
		val currentIntentions = new HashMap(intentions)
		
		// Update the agents (we don't check for collisions but we could)
		for (intentionEntry : currentIntentions.entrySet) {
			val body = environment.bodies.get(intentionEntry.key)
			if(body !== null) {
				body.move(intentionEntry.value, occurrence.deltaTime)
			}
		}

		// Compute the perceptions to send them to the agents
		for(bodyEntry : environment.bodies.entrySet()) {
			val body = bodyEntry.value
			val perceivedBodies = <Perception>newArrayList
			for(otherBody : environment.bodies.values) {
				if (otherBody != bodyEntry.value &&
					otherBody.position.distance(body.position) < body.perceptionRadius) {
					val relativePosition = otherBody.position - body.position // Note: we store only the relative positions
					perceivedBodies.add(new Perception(relativePosition, otherBody.velocity))
				}
			}
			
			new PerceptionEvent(new Vector2d(body.velocity), perceivedBodies).emit [it.UUID == bodyEntry.key]
		}
		
		// Emit (for UI) an event notifying the environment has been updated
		new EnvironmentUpdatedEvent(environment).emit
		
	}
	
	on IntentionEvent {
		// If there are several intentions, only the last one will be applied when they will be consumed
		intentions.put(occurrence.source.UUID, occurrence.force)
	}
}
