/** 
 * 
 */
package fr.utbm.ia54.agents

import fr.utbm.ia54.IntentionEvent
import fr.utbm.ia54.PerceptionEvent
import fr.utbm.ia54.Vector2d
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import java.util.List
import fr.utbm.ia54.Perception

/** 
 * @author Alexandre Lombard
 * 
 */
// TODO Adjust forces
agent BoidAgent {
	
	uses DefaultContextInteractions

	on Initialize {
		//
	}

	on Destroy {
		//
	}
	
	on PerceptionEvent {
		var force = new Vector2d()
		
		// Arbitrary coefficient are applied to each force
		force = force + cohesion(occurrence.velocity, occurrence.perceivedBodies) * 0.001
		force = force + alignment(occurrence.velocity, occurrence.perceivedBodies) * 0.01
		force = force + separation(occurrence.perceivedBodies) * 1.0
		
		new IntentionEvent(force).emit [it.UUID == occurrence.source.UUID]
	}
	
	def cohesion(velocity: Vector2d, perceptions : List<Perception>) : Vector2d {
		// Compute the average location
		// Note: perceptions are relative so the average location is also relative
		var averageLocation = new Vector2d()
		
		for (p : perceptions) {
			averageLocation = averageLocation + p.position
		}
		
		averageLocation = averageLocation / (perceptions.size as double)
		
		// Steer to the average location 
		return averageLocation - velocity
	}
	
	def alignment(velocity: Vector2d, perceptions: List<Perception>): Vector2d {
		// Compute the average velocity
		var averageVelocity = new Vector2d
		
		for (p : perceptions) {
			averageVelocity = averageVelocity + p.velocity
		}
		
		averageVelocity = averageVelocity / (perceptions.size as double)
		
		return averageVelocity - velocity
	}
	
	def separation(perceptions: List<Perception>): Vector2d {
		// Compute average vector divided by distance
		var force = new Vector2d
		var count = 0
		
		for(p: perceptions) {
			if (p.position.length > 0) {
				force = force - p.position / p.position.length
				count++;
			}
		}
		
		force = force / (count as double)
		
		return force
	}
}
